title: Read the Locally-Managed Master Key from a File
ref: read-local-master-key-from-file
level: 4
content: |
  First, retrieve the contents of the local master key file that you generated
  in the :ref:`Create a Master Key <fle-create-a-master-key>` section:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 11

           String path = "master-key.txt";

           byte[] fileBytes = new byte[96];

           try (FileInputStream fis = new FileInputStream(path)) {
             fileBytes = fis.readAllBytes();
           } catch (IOException e) {
             e.printStackTrace();
           }

           final byte[] localMasterKey = Arrays.copyOf(fileBytes, 96);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 5

           const path = "./master-key.txt";
           let localMasterKey;
           fs.readFile(path, (err, data) => {
             if (err) throw err;
             localMasterKey = data;
           });
---
title: Specify KMS Provider Settings
ref: specify-kms-provider-settings
level: 4
content: |
  Next, specify the KMS provider settings. The client uses these settings to
  discover the master key. Set the provider name to ``local`` when using a local
  master key:

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        The KMS provider settings are stored in a Map in order to use the
        :java-docs-latest:`kmsProviders helper
        method <javadoc/com/mongodb/ClientEncryptionSettings.Builder.html#kmsProviders(java.util.Map)>`
        for the ClientEncryptionSettings Builder.

        .. code-block:: java
           :emphasize-lines: 4,5

           String kmsProvider = "local";

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
             put(kmsProvider, new HashMap<String, Object>() {{
               put("key", localMasterKey);
             }});
           }};
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 2,3

            const kmsProviders = {
              local: {
                key: localMasterKey,
              },
            };

---
title: Create a Data Encryption Key
ref: create-a-data-encryption-key
level: 4
content: |
  Construct a client with the MongoDB connection string and key vault
  namespace configuration, and create a data encryption key. The key vault in
  this example uses the ``encryption`` database and ``__keyVault`` collection.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 8,9,12,13

           String connectionString = "mongodb://localhost:27017";
           String keyVaultNamespace = "encryption.__keyVault";

           ClientEncryptionSettings clientEncryptionSettings = ClientEncryptionSettings.builder()
             .keyVaultMongoClientSettings(MongoClientSettings.builder()
               .applyConnectionString(new ConnectionString(connectionString))
               .build())
             .keyVaultNamespace(keyVaultNamespace)
             .kmsProviders(kmsProviders)
             .build();

           ClientEncryption clientEncryption = ClientEncryptions.create(clientEncryptionSettings);
           BsonBinary dataKeyId = clientEncryption.createDataKey(kmsProvider, new DataKeyOptions());
           System.out.println("DataKeyId [UUID]: " + dataKeyId.asUuid());

           final String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());
           System.out.println("DataKeyId [base64]: " + base64DataKeyId);

        The ``createDataKey()`` method returns a :java-docs-latest:`BsonBinary
        <javadoc/org/bson/BsonBinary.html>` object from which we can extract
        the UUID and Base64 representations of the key id.

     .. tab::
        :tabid: nodejs

        .. code-block:: javascript
           :emphasize-lines: 10,11,13

           const base64 = require("uuid-base64");
 
           const connectionString = "mongodb://localhost:27017";
           const keyVaultNamespace = "encryption.__keyVault";
           const client = new MongoClient(connectionString, {
             useNewUrlParser: true,
             useUnifiedTopology: true,
           });
 
           client.connect()
             .then((clientConnection) => {
               const encryption = new ClientEncryption(client, {
                 keyVaultNamespace,
                 kmsProviders,
               });
               encryption.createDataKey("local", (err, key) => {
                 if (err) {
                   console.error(err);
                 } else {
                   const base64DataKeyId = key.toString("base64");
                   const uuidDataKeyId = base64.decode(base64DataKeyId);
                   console.log("DataKeyId [UUID]: ", uuidDataKeyId);
                   console.log("DataKeyId [base64]: ", base64DataKeyId);
                 }
               });
               // ...
             });


        .. note::

           This code includes a dependency on the ``uuid-base64``
           npm package. See the `npmjs documentation on the uuid-base64
           package <https://www.npmjs.com/package/uuid-base64>`_ for
           installation instructions.

  The ``_id`` field of the data encryption key is represented as a **UUID**
  and is encoded in **Base64** format. Use your **Base64**-encoded data key
  id when specified for the remainder of this guide.

  The output from the code above should resemble the following:

  .. code-block:: none

     DataKeyId [UUID]: de4d775a-4499-48bc-bb93-3f81c3c90704
     DataKeyId [base64]: 3k13WkSZSLy7kwAAP4HDyQ==

  .. note::

     Ensure that the client has `ReadWrite
     <https://docs.mongodb.com/manual/reference/built-in-roles/#readWrite>`_
     permissions on the specified key vault namespace.
---
title: Verify that the Data Encryption Key was Created
ref: verify-data-key-created
level: 4
content: |
  Query the key vault collection for the data encryption key that was inserted
  as a document into your MongoDB replica set using the key id printed in the
  prior step.

  .. tabs-drivers::

     .. tab::
        :tabid: java-sync

        .. code-block:: java
           :emphasize-lines: 4

           String connectionString = "mongodb://localhost:27017";
           String keyVaultDb = "encryption";
           String keyVaultCollection = "__keyVault";
           String base64KeyId = "3k13WkSZSLy7kwAAP4HDyQ=="; // use the base64 data key id returned by createKey() in the prior step

           MongoClient mongoClient = MongoClients.create(connectionString);
           MongoCollection<Document> collection = mongoClient.getDatabase(keyVaultDb).getCollection(keyVaultCollection);

           Bson query = Filters.eq("_id", new Binary((byte) 4, Base64.getDecoder().decode(base64KeyId)));
           Document doc = collection
               .find(query)
               .first();

           System.out.println(doc);

        This code example should print a retrieved document that resembles the
        following:

        .. code-block:: none

           Document{{
               _id=dad3a063-4f9b-48f8-bf4e-7ca9d323fd1c,
               keyMaterial=org.bson.types.Binary@40e1535,
               creationDate=Wed Sep 25 22:22:54 EDT 2019,
               updateDate=Wed Sep 25 22:22:54 EDT 2019,
               status=0,
               masterKey=Document{{provider=local}}
           }}

        .. admonition:: View the Extended JSON Representation of the Data Key
           :class: note

           While the ``Document`` class is the
           :java-docs-latest:`Document type </bson/documents>`
           most commonly used to work with query results, we can use the
           ``BsonDocument`` class to view the data key document as extended
           JSON. Replace the ``Document`` assignment code with the following
           to retrieve and print a ``BsonDocument``:

           .. code-block:: java
              :emphasize-lines: 1,2

              BsonDocument doc = collection
                  .withDocumentClass(BsonDocument.class)
                  .find(query)
                  .first();

              System.out.println(doc);
     .. tab::
        :tabid: nodejs

        .. code-block:: javascript

           const connectionString = "mongodb://localhost:27017/";
           const keyVaultDb = "encryption";
           const keyVaultCollection = "__keyVault";
 
           const client = new MongoClient(connectionString, {
             useNewUrlParser: true,
             useUnifiedTopology: true,
           });
 
           client.connect()
             .then((clientConnection) => {
               const keyDB = clientConnection.db(keyVaultDb);
               const keyColl = keyDB.collection(keyVaultCollection);
               const query = {
                 _id: key,
               };
               keyColl.findOne(query)
                 .then((dataKey) => {
                   console.log("Data Key Document: ", dataKey);
                 });
             });

        This code example should print a retrieved document that resembles the
        following:

        .. code-block:: none

           Data Key Document:  {
             _id: Binary {
               _bsontype: 'Binary',
               sub_type: 4,
               position: 16,
               buffer: <Buffer 68 ca d2 10 16 5d 45 bf 9d 1d 44 d4 91 a6 92 44>
             },
             keyMaterial: Binary {
               _bsontype: 'Binary',
               sub_type: 0,
               position: 160,
               buffer: <Buffer f1 4a 9f bd aa ac c9 89 e9 b3 da 48 72 8e a8 62 97 2a 4a a0 d2 d4 2d a8 f0 74 9c 16 4d  2c 95 34 19 22 05 05 84 0e 41 42 12 1e e3 b5 f0 b1 c5 a8 37 b8 ... 110 more bytes>
             },
             creationDate: 2019-10-03T20:47:54.017Z,
             updateDate: 2019-10-03T20:47:54.017Z,
             status: 0,
             masterKey: { provider: 'local' }
           }




  This retrieved document contains the following data:

  * Data encryption key UUID.
  * Data encryption key, in encrypted form.
  * KMS provider information for the master key.
  * Other metadata such as creation and last modified date.

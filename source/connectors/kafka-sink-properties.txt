.. _kafka-sink-properties:

=============================================
Kafka Sink Connector Configuration Properties
=============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Sink Connector Configuration Properties
---------------------------------------

Refer to the table below to create or migrate a properties file for your
MongoDB Kafka sink connector. See `MongoSinkConnector.properties
<https://github.com/mongodb/mongo-kafka/blob/master/config/MongoSinkConnector.properties>`_
for an example configuration file.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 1 1 3

   * - Name
     - Type
     - Description

   * - topics
     - list
     - | A list of Kafka topics for the sink connector.
       |
       | **Default**: (none)
       | **Accepted Values**: A non-empty list

   * - connection.uri
     - string
     - | A :manual:`standard MongoDB connection URI string </reference/connection-string/#standard-connection-string-format>`.
       | For example: ``mongodb://username:password@localhost/``
       |
       | **Default**: ``mongodb://localhost:27017``
       | **Accepted Values**: A valid connection string


   * - database
     - string
     - | The name of the MongoDB database the sink writes to.
       |
       | **Default**: (none)
       | **Accepted Values**: A non-empty string

   * - collection
     - string
     - | *Optional*. Single sink MongoDB collection name to write to. If the sink follows multiple topics, this is the default collection they are mapped to.
       |
       | **Default**: ``""``
       | **Accepted Values**: A MongoDB collection name

   * - document.id.strategy
     - string
     - | The IdStrategy class name to use for generating a unique document id (_id).
       |
       | **Default**: ``com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy``
       | **Accepted Values**: An empty string or a fully qualified Java class name

   * - delete.on.null.values
     - boolean
     - | Whether or not the connector tries to delete documents based on key when value is null.
       |
       | **Default**: ``false``
       | **Accepted Values**: ``true`` or ``false``

   * - max.batch.size
     - int
     - | The maximum number of sink records to possibly batch together for processing.
       |
       | **Default**: ``0``
       | **Accepted Values**: An integer

   * - max.num.retries
     - int
     - | How often a retry should be done on write errors.
       |
       | **Default**: ``3``
       | **Accepted Values**: An integer

   * - retries.defer.timeout
     - int
     - | How long in ms a retry should get deferred.
       |
       | **Default**: ``5000``
       | **Accepted Values**: An integer

   * - change.data.capture.handler
     - string
     - | The class name of the CDC handler to use for processing.
       |
       | **Default**: ``""``
       | **Accepted Values**: An empty string or a fully qualified Java class name

   * - field.renamer.mapping
     - string
     - | An inline JSON array with objects describing field name mappings. For example:
       | ``[ { "oldName":"key.fieldA", "newName":"field1" }, { "oldName":"value.xyz", "newName":"abc" } ]``
       |
       | **Default**: ``[]``
       | **Accepted Values**: A valid JSON array

   * - field.renamer.regexp
     - string
     - | An inline JSON array with objects describing regexp settings. For example:
       | ``[ {"regexp":"^key\\\\..*my.*$", "pattern":"my", "replace":""}, {"regexp":"^value\\\\..*$", "pattern":"\\\\.", "replace":"_"} ]``
       |
       | **Default**: ``[]``
       | **Accepted Values**: A valid JSON array

   * - key.projection.list
     - string
     - | A comma-separated list of field names for key projection.
       |
       | **Default**: ``""``
       | **Accepted Values**: A comma-separated list of field names

   * - key.projection.type
     - string
     - | The type of key projection to use.
       |
       | **Default**: ``none``
       | **Accepted Values**:  ``none``, ``blacklist``, or ``whitelist``

   * - post.processor.chain
     - list
     - | A comma-separated list of post-processor classes to process the data before saving to MongoDB.
       |
       | **Default**: ``[ com.mongodb.kafka.connect.sink.processor.DocumentIdAdder ]``
       | **Accepted Values**: A list of fully qualified Java class names

   * - rate.limiting.every.n
     - int
     - | After how many processed batches the rate limit should trigger (NO rate limiting if n=0)
       |
       | **Default**: ``0``
       | **Accepted Values**: An integer

   * - rate.limiting.timeout
     - int
     - | How long in ms processing should wait before continuing processing.
       |
       | **Default**: ``0``
       | **Accepted Values**: An integer

   * - value.projection.list
     - string
     - | A comma-separated list of field names for value projection.
       |
       | **Default**: ``""``
       | **Accepted Values**: A comma-separated list of field names

   * - value.projection.type
     - string
     - | The type of value projection to use.
       |
       | **Default**: ``none``
       | **Accepted Values**: ``none``, ``blacklist``, or ``whitelist``

   * - writemodel.strategy
     - string
     - | The class that handles how build the write models for the sink documents.
       |
       | **Default**: ``com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneDefaultStrategy``
       | **Accepted Values**: A fully qualified Java class name

   * - topic.override.<topicName>.<propertyName>
     - string
     - | Specifies per-topic configuration overrides. For example:
       | ``topic.override.foo.collection=bar`` instructs the connector sink to store data from the ``foo`` topic in the ``bar`` collection. See :ref:`topic-specific-configuration` for additional examples.

       .. note::
       
          All configuration options can be specified on a per-topic basis
          except ``connection.uri`` and ``topics``.
       
       | **Default**:  ``""``
       | **Accepted Values**: Value specific to the topic override property


.. _topic-specific-configuration:

Topic-Specific Configuration Settings
-------------------------------------

The MongoDB Kafka Sink Connector supports sinking data from multiple topics.
Specify properties specific to a topic using configurations in the
``topic.override.<topicName>.<propertyName>`` format. The properties that
are not overridden will use the global (not topic-specific) settings or
default values.

.. note::

   The ``topics`` property and ``connection.uri`` property are global and
   **cannot** be overridden.

The following examples demonstrate how to apply topic-specific settings to
sink data:

Example: Override Connector Sink Settings on TopicA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: properties

   topic.override.topicA.collection=collectionA
   topic.override.topicA.document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.UuidStrategy
   topic.override.topicA.post.processor.chain=com.mongodb.kafka.connect.sink.processor.DocumentIdAdder,com.mongodb.kafka.connect.sink.processor.BlacklistValueProjector
   topic.override.topicA.value.projection.type=blacklist
   topic.override.topicA.value.projection.list=k2,k4
   topic.override.topicA.max.batch.size=100

These properties result in the following actions for messages originating
from the ``topicA`` Kafka topic:

- Generate a UUID to be stored in the ``_id`` field for each new document.
- Omit fields ``k2`` and ``k4`` from the value projection using a blacklist.
- Write documents to the MongoDB collection ``collectionA`` in batches of
  up to 100.

Example: Override Connector Sink Settings on TopicC
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: properties

   topic.override.topicC.collection=collectionC
   topic.override.topicC.document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInValueStrategy
   topic.override.topicC.post.processor.chain=com.mongodb.kafka.connect.sink.processor.WhitelistValueProjector
   topic.override.topicC.value.projection.type=whitelist
   topic.override.topicC.value.projection.list=k3,k5
   topic.override.topicC.writemodel.strategy=com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneTimestampsStrategy

These properties result in the following actions for messages originating
from the ``topicC`` Kafka topic:

- Read the UUID from the Kafka message and store it in the ``_id`` field for
  each new document.
- Include only fields ``k3`` and ``k5`` in the value projection using
  a whitelist.
- Use the write model strategy ``UpdateOneTimestampsStrategy`` that
  records inserted and modified timestamps for each document.

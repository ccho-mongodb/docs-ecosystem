.kafka-sink-cdc

==============================
Kafka Sink Change Data Capture
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecols

Change Data Capture
-------------------


Change Data Capture Mode
^^^^^^^^^^^^^^^^^^^^^^^^

The sink connector can also be used in a different operation mode in order to handle change data capture (CDC) events.
Currently, the following CDC events from `Debezium <http://debezium.io/>`_ can be processed:


* `MongoDB <http://debezium.io/docs/connectors/mongodb/>`_
* `MySQL <http://debezium.io/docs/connectors/mysql/>`_
* `PostgreSQL <http://debezium.io/docs/connectors/postgresql/>`_

This effectively allows to replicate all state changes within the source databases into MongoDB collections. Debezium produces very similar
CDC events for MySQL and PostgreSQL. The so far addressed use cases worked fine based on the same code which is why there is only one
*RdbmsHandler* implementation to support them both at the moment.

Also note that **both serialization formats (JSON+Schema & AVRO) can be used** depending on which configuration is a better fits for your
use case.

CDC Handler Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

The sink connector configuration offers a property called *mongodb.change.data.capture.handler* which is set to the fully qualified class
name of the respective CDC format handler class. These classes must extend from the provided abstract class
`CdcHandler <https://github.com/mongodb/mongo-kafka/blob/master/src/main/java/com/mongodb/kafka/connect/sink/cdc/CdcHandler.java>`_.
As soon as this configuration property is set the connector runs in **CDC operation mode**.

An example JSON configuration the sink connector which uses the current default implementation that is capable to process
Debezium CDC MongoDB events. This config can be posted to the
`Kafka connect REST endpoint <https://docs.confluent.io/current/connect/references/restapi.html>`_ in order to run the sink connector.

.. code-block:: json

   {
     "name": "mongo-sink-debezium-cdc",
     "config": {
       "key.converter": "io.confluent.connect.avro.AvroConverter",
       "key.converter.schema.registry.url": "http://localhost:8081",
       "value.converter": "io.confluent.connect.avro.AvroConverter",
       "value.converter.schema.registry.url": "http://localhost:8081",
       "connector.class": "com.mongodb.kafka.connect.sink.MongoSinkConnector",
       "topics": "myreplset.kafkaconnect.mongosrc",
       "connection.uri": "mongodb://mongodb:27017/kafkaconnect?w=1&journal=true",
       "change.data.capture.handler": "com.mongodb.kafka.connect.sink.cdc.debezium.mongodb.MongoDbHandler",
       "collection": "mongosink"
     }
   }

Convention-based deletion on null values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are scenarios in which there is no CDC enabled source connector in place. However, it might be required to still be able to handle
record deletions. For these cases the sink connector can be configured to delete records in MongoDB whenever it encounters sink records
which exhibit *null* values. This is a simple convention that can be activated by setting the following configuration option:

.. code-block:: properties

   delete.on.null.values=true

Based on this setting the sink connector tries to delete a MongoDB document from the corresponding collection based on the sink record's
key or actually the resulting *_id* value thereof, which is generated according to the specified `DocumentIdAdder <#documentidadder>`_.
